nil (do (set! *warn-on-reflection* nil) (do nil (try (clojure.core/require (quote clojure.tools.nrepl.server)) (catch java.lang.Throwable t__11738__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote clojure.tools.nrepl.server) ":") (clojure.core/or (.getMessage t__11738__auto__) (clojure.core/type t__11738__auto__))))) (try (clojure.core/require (quote complete.core)) (catch java.lang.Throwable t__11738__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote complete.core) ":") (clojure.core/or (.getMessage t__11738__auto__) (clojure.core/type t__11738__auto__))))) (try (clojure.core/require (quote clojure.tools.nrepl.middleware.render-values)) (catch java.lang.Throwable t__11738__auto__ (clojure.core/println "Error loading" (clojure.core/str (quote clojure.tools.nrepl.middleware.render-values) ":") (clojure.core/or (.getMessage t__11738__auto__) (clojure.core/type t__11738__auto__))))) (do (do (clojure.core/require (quote ultra.hardcore)) (clojure.core/require (quote whidbey.repl)) (whidbey.repl/init! nil) (ultra.hardcore/configure! {:color-scheme :solarized_dark, :print-meta false, :map-delimiter "", :print-fallback :print, :sort-keys true})))) (require (quote spyscope.core)) (require (quote [lucid.flight.inject :as inject]) (quote lucid.flight.reflection)) (require (quote io.aviso.repl)) (require (quote taoensso.tufte)) (io.aviso.repl/install-pretty-exceptions) (inject/in [lucid.flight.inject :refer [inject [in inject-in]]] clojure.core [lucid.flight.reflection .> .? .* .% .%> .& .>ns .>var] [taoensso.tufte defnp] tufte [taoensso.tufte p profiled profile] clojure.core > [clojure.pprint pprint]) (clojure.core/require (quote ultra.hardcore)) (ultra.hardcore/add-test-hooks! {:color-scheme :solarized_dark, :print-meta false, :map-delimiter "", :print-fallback :print, :sort-keys true}) (do (clojure.core/when (try (java.lang.Class/forName "sun.misc.Signal") (catch java.lang.ClassNotFoundException e__11730__auto__)) (try (sun.misc.Signal/handle (sun.misc.Signal. "INT") (clojure.core/proxy [sun.misc.SignalHandler] [] (leiningen.repl/handle [signal__11731__auto__]))) (catch java.lang.Throwable e__11730__auto__))) (clojure.core/let [server__11733__auto__ (clojure.tools.nrepl.server/start-server :bind "127.0.0.1" :port 0 :ack-port 49882 :handler (clojure.tools.nrepl.server/default-handler (var clojure.tools.nrepl.middleware.render-values/render-values))) port__11734__auto__ (:port server__11733__auto__) repl-port-file__11735__auto__ (clojure.core/apply clojure.java.io/file ["/git/github/stateful-generators" ".nrepl-port"]) legacy-repl-port__11736__auto__ (if (.exists (clojure.java.io/file "/git/github/stateful-generators/target")) (clojure.java.io/file "/git/github/stateful-generators/target" "repl-port"))] (clojure.core/when false (clojure.core/println "nREPL server started on port" port__11734__auto__ "on host" "127.0.0.1" (clojure.core/str "- nrepl://" "127.0.0.1" ":" port__11734__auto__))) (clojure.core/spit (clojure.core/doto repl-port-file__11735__auto__ .deleteOnExit) port__11734__auto__) (clojure.core/when legacy-repl-port__11736__auto__ (clojure.core/spit (clojure.core/doto legacy-repl-port__11736__auto__ .deleteOnExit) port__11734__auto__)) (clojure.core/deref (clojure.core/promise)))))